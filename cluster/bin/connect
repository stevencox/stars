#!/bin/bash

#set -e

stars_root=$PWD

masters="
stars-dc0.edc.renci.org
stars-dc1.edc.renci.org
stars-dc2.edc.renci.org
"

workers="
stars-dw0.edc.renci.org
stars-dw1.edc.renci.org
stars-dw2.edc.renci.org
stars-dw3.edc.renci.org
"
conf_group () {
    local env=$1
    local group=$2
    ansible-playbook $group.yml -i $env --limit $group
}

config_zk () {
    i=1
    for z in $masters; do
	ssh $z "sudo rm -rf /var/lib/zookeeper/*"
	ssh $z "sudo su - zookeeper -c \"echo $i > /var/lib/zookeeper/myid \" "
	ssh $z "sudo ls -lisa /var/lib/zookeeper/myid"
	ssh $z "sudo cat /var/lib/zookeeper/myid"
	
	scp $stars_root/conf/zookeeper/zoo.cfg $z:/home/$USER
	ssh $z "sudo cp zoo.cfg /opt/zookeeper-3.4.6/conf/zoo.cfg"
	ssh $z "sudo chown zookeeper opt/zookeeper-3.4.6/conf/zoo.cfg"
	ssh $z "sudo cat /opt/zookeeper-3.4.6/conf/zoo.cfg"
	i=$(( i + 1 ))
    done
}
config_mesos_masters () {
    i=0
    for z in $masters; do

	scp $stars_root/conf/mesos/mesos-master.service.$i $z:/home/$USER
	ssh $z "sudo cp /home/$USER/mesos-master.service.$i /usr/lib/systemd/system/mesos-master.service"
	ssh $z "sudo systemctl daemon-reload"
	ssh $z "systemctl status mesos-master.service"
	
#	scp $stars_root/conf/marathon/marathon.service $z:/home/$USER
#	ssh $z "sudo cp /home/$USER/marathon.service /usr/lib/systemd/system/marathon.service"
#	ssh $z "sudo systemctl daemon-reload"
#	ssh $z "systemctl status marathon.service"
	config_service $z marathon marathon

	ssh $z "sudo touch /etc/haproxy/haproxy.auto.cfg"
	ssh $z "sudo chown $USER /etc/haproxy/haproxy.auto.cfg"
	ssh $z "sudo mkdir -p /var/log/orchestration"
	ssh $z "sudo chown $USER /var/log/orchestration"
	ssh $z "sudo mkdir -p /opt/app"
	ssh $z "sudo chown $USER /opt/app"
	ssh $z "sudo rm -rf /opt/app/orchestration"
	ssh $z "git clone https://github.com/stevencox/orchestration.git /opt/app/orchestration"
	scp $stars_root/conf/orchestration/local_config.json $z:/opt/app/orchestration/etc
	config_service $z orchestration orchestration

#	ssh $z "sudo service iptables stop"
#	ssh $z "sudo service iptables status"
#	ssh $z "sudo systemctl disable iptables"
	i=$(( i + 1 ))
    done
    cd $stars_root/system
    ansible masters --become -i production -a "sudo service mesos-master restart"
    ansible masters --become -i production -a "sudo service mesos-master status"
    ansible masters --become -i production -a "sudo service marathon restart"
    ansible masters --become -i production -a "sudo service marathon status"
}
ansh () {
    group=$1
    ansible $group --become -i production -a "$2"
}
config_service () {
    local host=$1
    local type=$2
    local service=$3
    scp $stars_root/conf/$type/$service.service $host:/home/$USER
    ssh $host "sudo cp /home/$USER/$service.service /usr/lib/systemd/system/"
    ssh $host "sudo systemctl daemon-reload"
    ssh $host "sudo service $service restart"
    ssh $host "sudo service $service status"
}
config_mesos_workers () {
    for z in $workers; do
	echo configuring $z
	config_service $z mesos mesos-slave
#	config_service $z docker docker
#--work_dir=/home/cluster/mesos
	ssh $z "sudo service iptables stop"
	ssh $z "sudo service iptables status"
	ssh $z "sudo systemctl disable iptables"
    done
    cd $stars_root/system
    ansible workers --become -i production -a "sudo service mesos-slave restart"
}

# zeppelin: sudo chown -R zeppelin /opt/zeppelin-0.7.0-bin-all/

config_python () {
    for z in $workers $masters; do
	ssh $z "sudo yum install -y python34"
	ssh $z "which python3"
    done
}

#config_zk
config_mesos_masters
#config_mesos_workers
#config_python
