#!/bin/bash

#set -e

stars_root=$PWD

masters="
stars-dc0.edc.renci.org
stars-dc1.edc.renci.org
stars-dc2.edc.renci.org
"

workers="
stars-dw0.edc.renci.org
stars-dw1.edc.renci.org
stars-dw2.edc.renci.org
stars-dw3.edc.renci.org
"
group="service accounts"

conf_group () {
    local env=$1
    local group=$2
    ansible-playbook $group.yml -i $env --limit $group
}

config_zookeeper () {
    z=$1
    local i=$(( $2 + 1 ))
    ssh $z "sudo rm -rf /var/lib/zookeeper/*"
    ssh $z "sudo su - zookeeper -c \"echo $i > /var/lib/zookeeper/myid \" "
    ssh $z "sudo cat /var/lib/zookeeper/myid"
    
    scp $stars_root/conf/zookeeper/zoo.cfg $z:/home/$USER
    ssh $z "sudo mkdir -p /opt/zookeeper-3.4.6/conf"
    ssh $z "sudo chown -R $USER /opt/zookeeper-3.4.6"
    ssh $z "sudo cp /home/$USER/zoo.cfg /opt/zookeeper-3.4.6/conf/"
    ssh $z "sudo chown -R zookeeper /opt/zookeeper-3.4.6"
#    ssh $z "sudo cat /opt/zookeeper-3.4.6/conf/zoo.cfg"
}
config_orchestration () {
    z=$1
    ssh $z "sudo touch /etc/haproxy/haproxy.auto.cfg"
    ssh $z "sudo chown $USER /etc/haproxy/haproxy.auto.cfg"
    ssh $z "sudo mkdir -p /var/log/orchestration"
    ssh $z "sudo chown $USER /var/log/orchestration"
    ssh $z "sudo mkdir -p /opt/app"
    ssh $z "sudo chown $USER /opt/app"
    ssh $z "sudo rm -rf /opt/app/orchestration"
    ssh $z "git clone https://github.com/stevencox/orchestration.git /opt/app/orchestration"
    scp $stars_root/conf/orchestration/local_config.json $z:/opt/app/orchestration/etc
    config_service $z orchestration orchestration
}
config_iptables () {
    z=$1
    ssh $z "sudo service iptables stop"
    ssh $z "sudo service iptables status"
    ssh $z "sudo systemctl disable iptables"
}
config_spark () {
    z=$1    
    ssh $z "sudo chown -R $USER /opt/spark*"
    ssh $z "sudo chgrp -R \"$group\" /opt/spark*"
#    scp $stars_root/conf/spark/spark-env.sh $z:/opt/spark/conf
#    scp $stars_root/conf/spark/spark-defaults.conf.later $z:/opt/spark/conf/spark-defaults.conf
}
config_mesos () {
    z=$1
    i=$2
#    scp $stars_root/conf/mesos/mesos-master.service.$i $z:/home/$USER
#    ssh $z "sudo cp /home/$USER/mesos-master.service.$i /usr/lib/systemd/system/mesos-master.service"
#    ssh $z "sudo systemctl daemon-reload"
#    ssh $z "systemctl status mesos-master.service"
}
config_zeppelin () {
    z=$1
    ssh $z "sudo cp /projects/stars/stack/v2/zeppelin/conf/zeppelin-env.sh /opt/zeppelin/conf"
    ssh $z "sudo cp /projects/stars/stack/v2/zeppelin/conf/shiro.ini /opt/zeppelin/conf"
    ssh $z "sudo chown -R zeppelin /opt/zeppelin"
    ssh $z "sudo systemctl daemon-reload"
    ssh $z "systemctl status zeppelin.service"
}
config_masters () {
    i=0
    for z in $masters; do
	config_zookeeper $z $i
	config_mesos $z $i
	config_service $z marathon marathon
	config_orchestration $z
	config_spark $z
	config_zeppelin $z
	config_iptables $z
	i=$(( i + 1 ))
    done
}
restart_masters () {
    cd $stars_root/system
#    restart masters zookeeper
    restart masters mesos-master
    restart masters marathon
    restart masters orchestration
    restart masters zeppelin
}
stop_masters () {
    cd $stars_root/system
    stop masters zookeeper
    stop masters mesos-master
    stop masters marathon
    stop masters orchestration
    stop masters zeppelin
}
stop () {
    local group=$1
    ansh $group "sudo service $2 stop"
}
restart () {
    local group=$1
    ansh $group "sudo service $2 restart"
#    ansh $group "sudo service $2 status"
}
ansh () {
    local group=$1
    ansible $group --become -i production -a "$2"
}
config_service () {
    local host=$1
    local type=$2
    local service=$3
    scp $stars_root/conf/$type/$service.service $host:/home/$USER
    ssh $host "sudo cp /home/$USER/$service.service /usr/lib/systemd/system/"
    ssh $host "sudo systemctl daemon-reload"
    ssh $host "sudo service $service restart"
    ssh $host "sudo service $service status"
}
config_workers () {
    for z in $workers; do
	echo configuring $z
#	config_service $z mesos mesos-slave
#	config_service $z docker docker
	ssh $z "sudo service iptables stop"
#	ssh $z "sudo service iptables status"
	ssh $z "sudo systemctl disable iptables"
	ssh $z "rm -f /home/cluster/mesos/meta/slaves/latest"
    done
#    cd $stars_root/system
#    ansible workers --become -i production -a "sudo service mesos-slave restart"
}
config_python () {
    for z in $workers $masters; do
	ssh $z "sudo yum install -y python34"
	ssh $z "which python3"
    done
}

build () {
    stop_masters
    config_masters
    # restart zookeeper separately to give it a moment to settle
    restart masters zookeeper
    ansh masters "sudo service zookeeper status"
    restart_masters
    config_workers
    #config_python
}
build 
