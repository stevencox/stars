#!/bin/bash

set -e

version=$1

if [ -z "$version" ]; then
    echo version parameter is required
    exit 0
fi

cat <<EOF > setup.py
from distutils.core import setup
from pip.req import parse_requirements
install_reqs = parse_requirements("stars/requirements.txt", session="i")
requirements = [str(r.req) for r in install_reqs]
setup(
    name = 'stars',
    packages = [ 'stars' ],
    package_data={ 'stars' : [
        'requirements.txt'
    ]},
    version = '${version}',
    description = 'Stars Data Science Stack',
    author = 'Steve Cox',
    author_email = 'scox@renci.org',
    install_requires = requirements,
    include_package_data=True,
    url = 'https://github.com/stevencox/stars',
    download_url = 'http://github.com/stevencox/stars/archive/0.1.tar.gz',
    keywords = [ 'spark', 'mesos', 'zeppelin', 'jupyter', 'blazegraph' ],
    classifiers = [ ],
)
EOF


publish () {
    set -x
    git tag
    echo $version
    if [ -z "$( git tag | grep $version )" ]; then
        echo "No tag found for $version. Creating distribution."
        python setup.py sdist
        tar tf dist/stars-${version}.tar.gz
        read -p "Press [enter] to continue with twine upload and git tagging"
        twine upload --skip-existing dist/stars-${version}.tar.gz
        touch publish
        git commit -am "api version $version"
        git push origin master
        git tag $version -m "publishing version $version"
        git push --tags origin master
    fi
    if [ "$( pip freeze | grep 'stars=' | grep -c stars )" -gt 0 ]; then
        python -m pip --no-cache-dir uninstall -y stars
    fi
    python -m pip --no-cache-dir install stars==$version
#    cur=$PWD
#    cd $(dirname $(which python))/../lib/pyth*/site-packages/
#    cd $cur
}

publish $*
